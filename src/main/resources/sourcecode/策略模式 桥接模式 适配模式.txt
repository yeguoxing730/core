桥接(Bridge)模式是结构型模式的一种，而策略(strategy)模式则属于行为模式。
在桥接模式和策略模式中，都是通过聚合的方式引用Implementor。 


策略模式：我要画圆，要实心圆，我可以用solidPen来配置，画虚线圆可以用dashedPen来配置。这是strategy模式。 
桥接模式：同样是画圆，我是在windows下来画实心圆，就用windowPen+solidPen来配置，在unix下画实心圆就用unixPen+solidPen来配置。
如果要再windows下画虚线圆，就用windowsPen+dashedPen来配置，要在unix下画虚线圆，就用unixPen+dashedPen来配置。 
画圆方法中，策略只是考虑算法的替换，而桥接考虑的则是不同平台下需要调用不同的工具，接口只是定义一个方法，而具体实现则由具体实现类完成。 

区别： 
桥接模式：不仅Implementor具有变化（ConcreteImplementor），而且Abstraction也可以发生变化（RefinedAbstraction），而且两者的变化是完全独立的，
RefinedAbstraction与ConcreateImplementor之间松散耦合，它们仅仅通过Abstraction与Implementor之间的关系联系起来。
强调Implementor接口仅提供基本操作，而Abstraction则基于这些基本操作定义更高层次的操作。 
策略模式：并不考虑Context的变化，只有算法的可替代性。强调Strategy抽象接口的提供的是一种算法，一般是无状态、无数据的，Context简单调用这些算法完成其操作。 

所以相对策略模式，桥接模式要表达的内容要更多，结构也更加复杂。 
桥接模式表达的主要意义其实是接口隔离的原则，即把本质上并不内聚的两种体系区别开来，使得它们可以松散的组合，而策略在解耦上还仅仅是某一个算法的层次，没有到体系这一层次。 
从结构图中可以看到，策略模式的结构是包容在桥接模式结构中的，Abstraction与Implementor之间就可以认为是策略模式，但是桥接模式一般Implementor将提供一系列的成体系的操作，
而且Implementor是具有状态和数据的静态结构。而且桥接模式Abstraction也可以独立变化。 

具体我还是觉得通过例子好理解一点，还有一句经典的话：自然流露到高内聚，低耦合才是真。


认识策略模式

应当明白，策略模式的重心不是如何实现算法（就如同工厂模式的重心不是工厂中如何产生具体子类一样），而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。
策略模式有一个很大的特点就是各策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，各个算法之间才可以相互替换。
运行期间，每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略中实现切换。

 

策略模式的优缺点
优点
1、避免了多重条件if...else if...else语句，多重条件语句并不容易维护
2、策略模式提供了管理相关算法簇的办法，恰当使用继承可以把公共代码移到父类，从而避免了代码重复

缺点
1、客户端必须知道所有的策略类，并自行决定使用 哪一个策略，这意味着客户端必须理解这些算法的区别，以便选择恰当的算法
2、如果备选策略很多，对象的数据会很多